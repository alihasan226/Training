11:25 AM 9/27/2019  JSON (JavaScript Object Notation) :--------------------------------------------------------------------------------------------------------------------

JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset
of the JavaScript Programming Language Standard ECMA-262 3rd Edition - December 1999. 

 JSON is a text format that is completely language independent
It can easily be sent to and from a server and used as a data format by any programming language.

JSON is built on two structures :-

1) A collection of name/value pairs. In various languages, this is realized as an object, record, struct, dictionary, hash table, keyed list, or associative array.
2) An ordered list of values. In most languages, this is realized as an array, vector, list, or sequence.


In JSON, they take on these forms

1) An object is an unordered set of name/value pairs. An object begins with {left brace and ends with }right brace. Each name is followed by :colon and the name/value pairs are separated 
   by ,comma.

2) An array is an ordered collection of values. AN array begins with [ left bracket and ends with ] right bracket. Values are separated by , comma

A value can be a string in double quotes, or a number, or true or false or null, or an object or an array. These structures can be nested.

A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes. A character is represented as a single character string. A string is very 
much like a C or Java string.

A number is very much like a C or Java number, except that the octal and hexadecimal formats are not used.


=>      JSON Data - A Name and a value 
JSON data is written as name/value pairs.
A name/value pair consists of a field name (in double quotes), folled by a collon, folloed by a value.

JSON Values (Data Types) :---------------------------------------
In JSON values must be one of the following data types:
=> a string
=> a number
=> an object
=> an array
=> a boolean
=> null


=> JSON Strings
Strings in JSON must be written in double quotes.

Example
{ "name":"John" }


=> JSON Numbers
Numbers in JSON must be an integer or a floating point.

Example
{ "age":30 }



=> JSON Objects
Values in JSON can be objects.

Example
{
"employee":{ "name":"John", "age":30, "city":"New York" }
}

JSON object are surrounded by curly braces{}.
json object are written in key/value pairs.
Keys must be string and value must be a valid JSON data type (string, number, object ,array, boolean or null).
Keys and values are separated by a colon.
Each key/value apir is separated by a comma.


=> JSON Arrays
Values in JSON can be arrays.

Example
{
"employees":[ "John", "Anna", "Peter" ]
}



=> Array in JSON object
{
"name":"John",
"age":30,
"cars":[ "Ford", "BMW", "Fiat" ]
}

=>Nested Array in JSON object
myObj = {
  "name":"John",
  "age":30,
  "cars": [
    { "name":"Ford", "models":[ "Fiesta", "Focus", "Mustang" ] },
    { "name":"BMW", "models":[ "320", "X3", "X5" ] },
    { "name":"Fiat", "models":[ "500", "Panda" ] }
  ]
 }



=>JSON Booleans
Values in JSON can be true/false.

Example
{ "sale":true }
JSON null
Values in JSON can be null.

Example
{ "middlename":null }


Both JSON and XML can be used to receive data from a web server.

example :-
JSON define an employees object with an array of 3 employees :

{"employees":[
 { "firstName":"John", "lastName":"Doe" },
  { "firstName":"Anna", "lastName":"Smith" },
  { "firstName":"Peter", "lastName":"Jones" }
]}




XML example :-
<employees>
  <employee>
    <firstName>John</firstName> <lastName>Doe</lastName>
  </employee>
  <employee>
    <firstName>Anna</firstName> <lastName>Smith</lastName>
  </employee>
  <employee>
    <firstName>Peter</firstName> <lastName>Jones</lastName>
  </employee>
</employees>


JSON is Unlike XML Because :-
=> JSON doesn't use end tag
=> JSON is shorter
=> JSON is quicker to read and write
=> JSON can use arrays


XML is much more difficult to parse than JSON.


HTTP :---------------------------
HTTP means HyperText Transfer Protocol.
HTTP is the underlying protocol used by the World Wide Web and this protocol defines how message are formatted and what actions Web servers and browsers should take in response 
to various commnad. 

Whne you enter a URl in your browser this actually sends an HTTP commnad to the Web server directly it to fetch and transmit the requested  web pages.

HTTP response code :-
These error messages, also called HTTP status codes are response codes given by Web servers and help identify the cause of the problem

List of HTTP Response Codes :---------------

400 Bad file Request
401 Unauthorized
403 Access denied
404 File not Found
408 Request time out
500 Internet Error
501 Not Implemented
502 Service temporarily overloaded
503 Service Unavailable