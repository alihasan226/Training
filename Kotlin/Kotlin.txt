Ali Hasan




10:13 24-01-2020  Safe calls (?) Null checks (!!)  :--------------------------------------------------

Kotlin's type system is aimed at eliminating the danger of null referenes from code.
One of the most common pitfalls in many programming language inclusing java is that accessing a member of a null reference will result in a null reference exception. In java this would be the equivalent of a NullPointerException.

Kotlin's type system is aimed to eliminating NullPointerException'f from our code. The only possible cause of NPE's may be:
=> An expilit call to throw NullPointerException()
=> Usage of a !! operator that is described below


var s:String = "abc"
a = null  // compilation error

In Kotlin the type system distinguish between references that can hodl null (nullable references) and those that can not (not-null references). a regular variable of type String can not hold null:


To sllow nulls we can declare aa variable as nullable string written String?:

var b : String?="abc"
b=null
print(b)

Now if you call amethod or access a property on a it's guarnteed not to cause an NPE, so you can safely say:


This operator is used to explicitly tell the compiler that the property is not null and if it is null please throw a null pointer exception (NPE)

nullableVariable !!.someMethodCall()

this code will work fine if nullableVariable is not null else it ti throw an NPE.



Difference  :-----------------------------

=> The basic difference while using ? and !! is if you want to separate a normal flow of var property having a 'non-null' value with 'null' value flow use ?

=> But if you are sure that the var property value is not null use !! instead of ?

Also ? can be used to return or throw a different kind of execeptions but !! will only throw an NPE.



Elvis Operator :-------------------------------
When we have a nullable reference r we can say if r is not null it otherwise use some non-null value x:

val l=b?.length?:-1

if the expression to left of ?: is not null the elvis operator returns it returns the expression to the right.  Note that the right-hand expression is evaluated only if the left-hand side is null.


The !! Operator   ( not-null assertion operator ):------------------------------ 

The third option is for NPE lovers the not-null assertion (!!) converts any values to a non-null type and throw an exception if the value is null.
This operator is used to explicitly tell the compiler that the property is not null and if it's null please throw a null pointer exception(NPE)

nullableVariable!!.somemethodCall()

this code will work fine if nullableVariable is not null else it will throw an NPE.



=> Declaring 2D Array in Kotlin and Its Operation :------------------------------

fun main(args : Array<String>){
    var ar_size:Int=readLine()!!.toInt()
    var array = Array(3){IntArray (3)}
    for(i in 0..ar_size-1){
        for(j in 0..ar_size-1){
            array[i][j]=readLine()!!.toInt()
        }
    }

    for(i in 0..ar_size-1){
        for(j in 0..ar_size-1){
            print("  "+array[i][j]!!.toString())
        }
        println()
    }
}





























1:10 PM 1/21/2020

Kotlin is a cross-platform, statically types general purpose programming language with type interface. Kotlin is designed to interoperated fully with Java and the JVM version of its standard
library depends on the java class Library but type interface allows its syntex to be more concise.Kotlin mainly targets the JVM but also compiles to JavaScript or native code.

On 7 May 2017 Google announced that the kotlin programming language is  nor preferred language for Android app development.
Since the release of Android Studio 3.0 in October 2017 Kotlin has been included as an alternative to standard Java Compiler.
The Android Kotlin compiler lets the user choose betwen targeting java 6 or java 8 compatibility bytecode.


The name comes from Kotlin Island near Petersburg Andrey Breslav mentioned that the team decided to name it after an island just like Java was named after the indonesian with this version.

At Google I/O 2017 Google announced first-class support for kotlin on Android.

Kotlin v1.2 was released on 28 November 2017 Sharing code between JVM and JavaScript platform feature was newely added to this release.


=> Designed
Development lead Andrey Breslav has said that Kotlin is designed to be an industrial-strength object-orieted language and a better language than Java but still be fully interoperable with
java code, allowing companies to make a gradual migration from java to Kotlin.


1) Semicolon are optional as a statement terminator in most cases a newline is sufficient for the compiler to deduce that the statement has ended.

2) Kotlin variable declarations and parameter lists have data type come after the variable name ( and with a colon separator) similar to pascal and typeScript.

3) Variable in kotlin can be immutable declared with val keyword  or mutable declared with the var keyword.

5) class member are public by  default and classes themselves are final by defult meaning that creating a derived class is disabled unless the base class is declared with the open keyword.

6) In addition to the classes and methods (called member functions in kotlin)  of object-oriented programming also support procedural programming with the use of functions. Kotlin functions
(and constructor) support deault arguments, variable-length argument list named arguments and overloading by unique signature. Class member functions are virtual.



Kotlin is a statically - Typed general purpose programming language. It is widely used to develop Android Applications.
It runs on JVM and can be used anywhere java is used today. It can used to develop Android apps, server-side apps and much more.


Features of Kotlin :----------------------

Conside :- Kotlin reduces writing the extra codes. this makes kotlin more concise.

Null-Safety :- kotlin is null safety language. Kotlin aimes to eliminated the NullPointerException (null reference) from the code.Interperable.

Smart cast :- it explicitly typecast  the immutable value and insert the value in its safe cast automatically.

Cimpilation Time :- It has better perfromance and fast compilation time.




Kotlin First Program Concept :------------------
 

fun main(args: Array<String>){
println("Hello World!")
}

=> First line of program defines a functions called main(). In Kotlin function is a group of statement that perform a group of task. Function start with a keyword fun followed by function name
(main in case).

=> main function takes an array of string (Array<String>) as a parameter and returns unit. Unit is used to indicate the function and does not return any value (void as in Java).



main() function is the entry point of the program it is called first when kotlin program start execution.



fun means define a function

main is by convention the entry point for an application   the main funtion(...)  is a list of function's arguments.

args in this case is the  name of the single argument to the function

:Array<String> is the type of the argument in this case an array of String

so it passes the command line argument into the starting function of an application.

   	----------::  It can be omitted if your program does not need to accept command line argument   ::--------------------




fun main(args: Array<String>){
    print("Enter Text : ")
    val stringInput= readLine()  		//Here we can take the input from the user
    val name=82
    println("You Entered : $stringInput size : ${stringInput.length}")
}




if you insist on using plain editor and the command line you need to compile your kotlin code before running it. Assuming that your Kotlin file is called program.kt

	kotlinc program.kt -include-runtime -d program.jar











Kotlin Variable :---------------------------

Variable refers to a memory location.it is used to stored data. the data of variable can be changed and used depending on condition or information passed to program.

Variable Declaration :-
Kotlin variable is declared using keyword var and val.

var language="Java"
val salary=30000

however you cannot change the type of a variable: number can only ever refer to Int values and message can only ever refer to String values so both number ="Test"  and message=3 are illegal and will syntax errors.

 

var is like a general variable and can be assigned multiple times and is known as the mutable variable in Kotlin.

Whereas val is a constant variable and can not be assigned multiple times and can initialized only single time and is known as the immutable variable in kotlin..


Globla Variable Top Level variable:-------------------------

In Kotlin , A global variable is a variable that is declared at the top of the program and outside all functions similar to C and C++. 

A local variable can only be used in the particular block where it is declared. A global variable can be used in all functions.

Example =>

var x = 100

fun fn() { 
    x = x + 100 
}

fun main(args: Array<String>) {
    println("X Value : $x")
    
    fn()
    
    println("X Value : $x")
}



==> 
 var language: String ="Java"
var salary:Int =3000

Here a variable language is String type and variable salary in Int type . We don't require specifying the type of variable explicitly Kotlin compiler known this by initializer expression

It is not mecessary to initialize variable at the time of its declaration. Variable can be initialize later on when the program is executed.



The terminology is that var declares a mutable variable and the val declares a read-only or assign-once variable so both kinds are called variable.
 new variable in Java with the final keyword.



Constants :-------------------------
If you have a value that is truly constant and the value is a string or a primitive type that is known at compile time you can declare an actual constant instead.

const val x = 2



CamelCase :----------------------------
Camel case is the practice of captilizing the first latter of each word in a series and then removing spaces , numbers, underscores, hyphens and other special sharacters.

Basic Camel Case Capitalization Rule :-----------------
1) First letter is capilalized
2) One or more letters in that word are also CamelCase
3) The word does not end on a capitalized letter CamelCasE
4) No two capitalisedletters shall follow directly each other: CamelCAse
5) No number in that word at any place CamelCase1more
6) No dot under_score or dash within the word only letters Camel_Case
7) Noforeign letters in it 


Lower Camel Case :---------------------

theFirstLetterNotCapilalizedAndEachWordThroughoutIs
thereAreNoHyphensOrSpacesInThisCamelCase


Snake Case ;----------------------------
Snake case is the pratice of wrting compund word or pharse that are separated by an underscores instead of by spaces. It is often used by programmers to write names and sometimes for filenames.  It is also very commonly used in Wikipedia URL..









lateinit =>
lateinit means late initialization. If you dot not want to initialize a variable in the constructor instead you want to initialize it later on and if you can guarntee the initialization before using it then declare that variable this lateinit keyword.It not allocate memory until initialization.


you cannot use val for lateinit variable as it will be initialized later on. Also you must guarntee that you are initilizing the variable before using the variable otherwise it will throw exception at runtime. You cannot use lateinit for primitive like int, long etc.





Kotlin Data Types :------------------------------------------------------------------

Data types (basic type) refers to type and size of data associated with variable and functions. 
Data types is used for declararing of memory location of variable which determine the feature of data.

=> In Kotlin Everything is object which means we can call member function and properties on any variable.

Kotlin Built-in Data types categories in following  different categories:-
1) Number
2) Character
3) Boolean
4) Array
5) String


Number Types :-
Number types of data are those which hold only number type data variables. It is further categorized into different Integer and Floating Point.


1) Byte 
2) Short
3) Int
4) Long
5) Float
6) Double


Character (Char) Data Type :------------------------

Characters are represented using the keyword Char. Char types are declared using single quotes ('A').


val calue='A'

val value2:Char
value2='A'




Boolean Data Types :----------------------------------

Boolean data is represented using the type Boolean. It contains value either true or false.
val flag=ture






Array :---------------------------------

Aray is collection of similar data types either of Int, String etc. Array in kotlins mutable in nature with fixed size which means we can perform both read and write operations on element of array

Arrays in kotlin are represented by the Array class. Array are created using library function arrayOf()  and Array() constructor.

Array has get()   set()   function size property as well as some other useful member funtions.


Creating Array using library function arrayOf() :-------------------------------------------------

the arrayOf() function create array of wrapper types. The item value are passed inside arrayOf() function like arrayOf(1,2,3) which create an array[1,2,3].

The elements of array are accessed through their index values   array[index]   Array index are start from zero.

val id=arrayOf(1,2,3,4,5)
val firstId=id[0]
val lastId=id[id.size-1]


Creating Array using Array() constructor :--------------------------------
Creating array using Array() constructor takes two arguments in Array() constructor:

1) First argument as a size of array
2) Second argument as the function,  which is used to initilize and return the value of array element given its index.

val array=Array(5,{i - > i*2 } )

Constrcutor of Array :---------------------------------
Array constructor id declared with specified size and init function. The init functions is used to returns the elment of array with their index.

Array(size:Int, init:(Int) -> T)

Kotlin Array can be created using arrayOf(),intArrayOf(),charArrayOf(),booleanArrayOf(), longArrayOf(), shortArrayOf(),byteArrayOf() functions.









String :-------------------------------------------------

String class represents array of char types.String are immutable which means the length and elments cannot be changed after their creation.

val ch:charArrayOf('h','e','l','l','o')
val st=String(ch)

Unlike Java Kotlin doesnot require a new keyword to instantiate an object of a String class. A String can be simply declared within double quotes("  ")  known as Escaped string or triple quotes("""  """) known as Raw string.


Kotlin String Property :----------------------------
length:Int		It returns the length of string sequence
indices:IntRange	It returns the ranges of valid character indices from current char sequence.
lastIndex:Int	It returns the index of last character from char sequence.


String Elements :-------------------------------------

The characters which are present in string are known as elments of string. Elment of string are accessed by indexing operation string[index]. String's index value starts from 0 and ends at one less than the size of string string[string.length-1].
Index 0 represent first element index 1 represent second element and so on.

String templates :---------------------------------
String template expression is a piece of code which is evaluated and its result is returned into string. Both String type (escaped and raw string) contain template expression. String templates start with a dollar $ which either a variable name or an arbitarary expression in curly braces.



String in kotlin is represent by String class. String immutable which means we cannot change the elements in String.

String declaration :

val text="Hello World"

Types of String :--------------------
There are two different types of String in kotlin.

1) Excaped String 
Ecaped String is declared within double quotes (" ") and may contain escape characters like '\n','\t','\b'

val text1 ="Hello, JavaTpoint"  
//or  
val text2 ="Hello, JavaTpoint\n"  
//or  
val text3 ="Hello, \nJavaTpoint"  


2) Raw String
Raw String is declared within triple quotes ("""  """). It provides facility to declare String in new lines and contain multiple lines. Raw String cannot contain any excape character.

val text1 ="""  
             Welcome   
                 To  
           JavaTpoint  
    """





String Equality :-------------------------------------

In Kotlin string equality comparision are done on the basis of structural equality (==) and referential equality (===)

In Structural equality two  objects have separate instances in memory but contain same value.
Referential equality specifies that two different reference point the same instacne in memory

fun main(args:Array<String>){
val str1="Hello World!"
val str2="Hello World!"

println(str1==str2)
println(str1!=str2)




Referential equality (===)

To check the two different references point to the same instance, we use === operator. The !== operator is used for negation. a === b specifies true if and only if a and b both point to the same object.

Let's see an example of referential equality to check different reference contains same instance or not. For creating string we are using a helper method buildString rather than using quotes.

    fun main(args: Array<String>) {  
    val str1 = buildString { "string value" }  
    val str2 = buildString { "string value" }  
    println(str1===str2)  
    println(str1!==str2)  
    }  



Structural Equality  ( == ) :----------------------------

== operator in kotlin only compare the data or variable, whereas in java or other language == is generally used to compare the reference. The negation counterpart of == in kotlin is != which is used to compare if both the value are not equal to each other.


Referential Equality ( === ) :-------------------------
=== operator is used to compare the reference of two  variable or object. It will only be true if both the object and variable pointing to  the same object

For values which are represented as primitive types at runtime  the === equality check is equivalent to the == check.


val int1=10
val int 2=10

println(int1==int2)
println(int1===int2)
println(int1.equal(int2))

all the will print truw because primitive datatypes only checks the value in case of === also.












Kotlin Exception Handing  :-------------------------------------------------

Exception is a runtime problem which occurs in the program and leans to program termination. This may be occurs due to running out of memoryspace , array out + bond, condition like divided by zero.


Exception Handling is a technique which handles the runtime problems and maintains the flow of program execution.
In Kotlin all exception classes are descendant of class throwable.

Four Different Keyword used in exception handling :-------------------
try
catch
finally
throw


try  :  block contains set of statement which might generates an exception. Ot must be follows by either catch or finally both.

catch  :  catch block is used to catch the exception thrown try block.

finally block always executes whether exception is handled or not. So it is used to execute important code statement.

throw keyword is used to throw an exception explicitly.


Kotlin Unchecked Exception

Unchecked exception is that exception which is thrown due to mistakes in our code. This exception type extends RuntimeException class. The Unchecked exception is checked at run time. Following are some example of unchecked exception:

    ArithmeticException: thrown when we divide a number by zero.
    ArrayIndexOutOfBoundExceptions: thrown when an array has been tried to access with incorrect index value.
    SecurityException: thrown by the security manager to indicate a security violation.
    NullPointerException: thrown when invoking a method or property on a null object.

Checked Exception in Java

Checked exception is checked at compile time. This exception type extends the Throwable class.

Syntax of try with catch block

    try{    
   
    
    }catch(e: SomeException){  


    
Example  =>
fun main(args: Array<String>){  
    try {  
        val data = 20 / 0  //may throw exception  
    } catch (e: ArithmeticException) {  
        println(e)  
    }  
    println("code below exception...")  
}
    }



Kotlin Nested try-catch block :------------------------
We can also able to use nested try blcok whenever required try catch blcok is such block in which onr try catch block is implmented into another try blcok.

The requirement of nested try catch block is arises when a block  fo code generated an exception and within that block another code statement also generates another exception


try    
{    
    // code block   
    try    
    {    
        // code block   
    }    
    catch(e: SomeException)    
    {    
    }    
}    
catch(e: SomeException)    
{    
} 



Kotlin finally Block :-----------------------------
Kotlin finally block such block which is always executed whether execution is handled or not. So it is used to execute important code statement'



Kotlin throw keyword

Kotlin throw keyword is used to throw an explicit exception. It is used to throw a custom exception.

To throw an exception object we will use the throw-expression.

fun main(args: Array<String>) {  
    validate(15)  
    println("code after validation check...")  
}  
fun validate(age: Int) {  
    if (age < 18)  
        throw ArithmeticException("under age")  
    else  
        println("eligible for drive")  
} 











Kotlin Type Conversion :------------------------------------------

Type conversion is a process in which one data type variable is converted into another data type type.

In kotlin implicit conversion of smaller data type into larger data is not supported.

var value1=10
val value2:Long =value1	//Compile error type mismatch

However in kotlin conversion is done by explicit in which smaller data type is converted into larger data type and vice-versa. This is done by using helper function.

var value1=10
val value2:Long = value1.toLong()

The list of helper functions used for numeric conversion in Kotlin is given below:

=> toByte()
=> toShort()
=> toInt()
=> toLong()
=> toFloat()
=> toDouble()
=> toChar()


Kotlin Type Converion Example :---------------------------
 

fun main(args: Array<String>){
var value1=100
var value2:Long=value1.toLong()
println(value2)
}



we can also converse from Larger data type to smaller data type

fun main(args: Array<String>){
var value1:Long=200
val value:Int=value.toInt()
println(value2)
}








Kotlin Operator :-----------------------------------------------------

Operator are special chracter which perform operation on operands (values or variable). There are various kind of operator available in kotlin.

=> Arithmentic Operator
=> Relational Operator
=> Assignment operator
=> Unary Operator
=> Bitwise Operator
=> Logical Operator



Arithmetic Operator :---------------------
Arithmetic operator are used to perform basic mathematical operations such as addition (+) subtraction (-) multiplication(*), division (/)  




Kotlin if-else Expression :------------------------------------------------
As if is an expression it is not used as standalone it is used with if-else expression and the result of if-else expression is assign into the variable.

Syntax:-
    val returnValue = if (condation) {  
         //code statement  
        } else {  
         // code statement  
        }  
        println(returnValue)  



Kotlin for Loop :-----------------------------
Kotlin for loop is used to iterate a part of program several times. It iterates through array ranges collections ar anything that provides for iterating . Kotlin for loop is equivalent to the foreach loop in language like c#.


for(item in collection){

}




Kotlin when Expression  :-------------------------------

Kotlin when expression is a conditional expression which returns the value . kotlin when expression is replacement of switch statement. kotlin when expression works as switch statement of other language (Java, C, C++)


fun main(args: Array<String>){

var number=4
var numberProvided=when(number){
1 -> "One"
2 -> "Two"
3 -> "Three"
4 -> "Four"

else -> "invalid number"
}

println("You provide $numberProvided)
}



Multiple Statement when Using Braces :--------------------------------
 we can use multiple statement enclose within block of condition

fun main(args : Array<String>){

var number =1
when(number){

1 -> {
println("Monday")
println("First day of the week")
}
7 -> {
println("Sunday")
}

else -> println("Other Days")

}
}




Multiple Branches of When :--------------------------------
 fun main(args :Array<String>){

var number=8
when(number){
3,4,5,6 -> 
println("It is summer season")
7,8,9 ->
println("It is rainy season")
10,11 -> 
println("It is winter season")
else  -> println("INvalid  input")
}
}




Using range in the When :------------------------
The when expression also check the ranges of input provided in when condition. A range is created using  (double dot)  operator

The in operator is used to check a value belongs to a range

fun main(args:Array<String>){
var number=7
when(number){
in 1..5 -> println("Input is provided in the range 1 to 5)
in 6..10 -> println("Input is provided in the range 6 to 10)
else -> println("none of these above")
}
}




Kotlin for Loop :-----------------------------------
Kotlin for loop is used to iterate a part of program several times. It iterates through arrays ranges collections or ahything that provides for iterate. Kotlin for loop is equivalent to the 
foreach loop in language like c#.

for(item in collection){
//body of loop
}


Iterate through array 
fun main(args : Array<String>) {  
    val marks = arrayOf(80,85,60,90,70)  
    for(item in marks){  
        println(item)  
    }  
}



Iterate through range :---------------------------------

fun main(args: Array<String>){
for (i in 1..5) print(i)  
    println()  
    print("for (i in 5..1) print(i) = ")  
    for (i in 5..1) print(i)             // prints nothing  
    println()  
    print("for (i in 5 downTo 1) print(i) = ")  
    for (i in 5 downTo 1) print(i)  
    println()  
    print("for (i in 5 downTo 2) print(i) = ")  
    for (i in 5 downTo 2) print(i)  
    println()  
    print("for (i in 1..5 step 2) print(i) = ")  
    for (i in 1..5 step 2) print(i)  
    println()  
    print("for (i in 5 downTo 1 step 2) print(i) = ")  
    for (i in 5 downTo 1 step 2) print(i)  
}


Output :-------------------------------------

for (i in 1..5) print(i) = 12345
for (i in 5..1) print(i) = 
for (i in 5 downTo 1) print(i) = 54321
for (i in 5 downTo 2) print(i) = 5432
for (i in 1..5 step 2) print(i) = 135
for (i in 5 downTo 1 step 2) print(i) = 531




Kotlin while Loop :------------------------------
The while loop is used to iterate a part of program several times. Loop execute the block of code until the condition has true. Kotlin while loop is similar to java while loop

while(condition){
//body of loop
}


fun main(args: Array<String>){  
    var i = 1  
    while (i<=5){  
        println(i)  
        i++  
    }  
}


output=>
1
2
3
4
5



Kotlin do while Loop :--------------

Kotlin Return and Jump :----------------------
There are three jump expression in kotlin.these jump expression are used for control the flow of program execution. these jump structure are :
=> break
=> continue
=> return


Break Expression :----------------
A break expression is used for terminate the nearest enclosing loop.It is almost used with if -else consition

for(..){  
       //body of for  
       if(checkCondition){  
           break;  
       }  
}  






Kotlin continue Jump Strcuture :-------------------------------

Kotlin continue statement is used to repeat the loop.It continue the current flow of the program and skip the reamaining code at specific condition.


for(...){
if(checkCondition){
continue
}
}

fun main(args: Array<String>) {  
        for (i in 1..3) {  
            println("i = $i")  
            if (j == 2) {  
                continue  
            }  
            println("this is below if")  
        }  
}  




Kotlin Function :---------------------------------

Function is a group of interrelated block of code which perform specific task.  Function is used to break a program into different sub module .it makes reusability of code and makes program more 
manageable.

In Kotlin functions are declared using fun keywork. there are two types of functions depending on whether it is available in standard libraray or defined by user.

=> Standard library function
=> user defined function

Standdard library Function :-----------
Kotlin Standard library function is built-in library which are implicitly present in library and availble for use..


fun main(args: Array<String>){  
    var number = 25  
    var result = Math.sqrt(number.toDouble())  
    print("Square root of $number is $result")  
}  



User defined Function :-------------------------
User defined function which is created by user.user defined function take the parameter perform an action and return the result of that action as a value.

fun functionName(){  
// body of function  
}

Kotlin Simpe User defined function :-

fun main(args: Array<String>){  
    sum()  
    print("code after sum")  
}  
fun sum(){  
    var num1 =5  
    var num2 = 6  
    println("sum = "+(num1+num2))  
} 




Kotlin Parametrized Function and Return value :---------------------------------

Function are also takes parameter as argument and return value.Kotlin functions are defined using Pascal notation.

fun main(args: Array<String>){  
   val result = sum(5, 6)  
    print(result)  
}  
fun sum(number1: Int, number2:Int): Int{  
    val add = number1+number2  
    return add  
}










Kotlin Array :----------------------------------
 Array is collection of similar data types either of Int String etc. Array is Kotlinis mutable in nature with fixed size which means we can perform both read and write operatios of element of array.

Construcor of Array :
Array constructor is declared with specified size and init function. the init function is used to return the elemnts of array with their index.

Array(size:int, init:(Int) -> T)

Kotlin Array can be created using arrayOf(), intArrayOf(), charArrayOf(), booleanArrayOf(), longArrayOf(), shortArrayOf(), byteArrayOf() functions.




Kotlin String :------------------
In Kotlin String equality comparision are done on the basic of structural equality (==) and referential equality (===)

Structural Equality two object have separate instance in memory but contain same value.
Referential equality specifies that two different reference point the same instance in memory

Structural equality (==)
To check the two object s containing the same value we use == operator or != for negation..It is equivalent to equals() in java.

fun main(args:Array<String>){
val str1="Hello World!"
val str2="Hello World!"

print(str1==str2)
print(str1!==str2)
}

 



















Kotlin Class and Object :-----------------------------------------

Kotlin supports both object oriented programming (OOP) as well as functional programming.Object orinted programming is based on real time object classes.
Kotlin also support pillers of OOP language such as encapsulation inheritance and polymorphism.

Kotlin class is similar to java class a class is a blueprint for the object which have common properties.Kotlin classes are declared using keyword class. 
Kotlin class has a header which specifies its type parameter construct and the class body which is surrounded by curly braces.


class className{   // class header  
      // property  
      // member function  
} 



Kotlin Object
Object is real time entity or may be a logical entity which has state and behavior. It has the characteristics:

state: it represents value of an object.
behavior: it represent the functionality of an object.
Object is used to access the properties and member function of a class. Kotlin allows to create multiple object of a class.

Create an object


class Account {  
    var acc_no: Int = 0  
    var name: String =  ""  
    var amount: Float = 0.toFloat()  
    fun insert(ac: Int,n: String, am: Float ) {  
        acc_no=ac  
        name=n  
        amount=am  
        println("Account no: ${acc_no} holder :${name} amount :${amount}")  
    }  
  
    fun deposit() {  
        //deposite code  
    }  
  
    fun withdraw() {  
       // withdraw code  
    }  
  
    fun checkBalance() {  
        //balance check code  
     }  
  
}  
fun main(args: Array<String>){  
    Account()  
    var acc= Account()  
    acc.insert(832345,"Ankit",1000f) //accessing member function  
    println("${acc.name}") //accessing class property  
}  




Kotlin Constructor :------------------------------------------------

In Kotlin, constructor is a block of code similar to method. Constructor is declared with the same name as the class followed by parenthesis '()'.
Constructor is used to initialize the variables at the time of object creation.


Types of Kotlin constructors
There are two types of constructors in Kotlin:

Primary constructor
Secondary constructor


Kotlin primary constructor
Primary constructor is used to initialize the class. It is declared at class header. Primary constructor code is surrounded by parentheses with optional parameter.

class myClass(val name: String, var id: Int) {  
}  
fun main(args: Array<String>){  
val myclass = myClass ("Ashu", 101)  
  
println("Name = ${ myclass.name}")  
println("Id = ${ myclass.id}")  
}  







Kotlin Visibility Modifier :------------------------------
visibility modifier are the keyword which are used to restrict the use of class, interface , methods and property of kotlin in the application. These modifier are used at multiple
places such as class header or method body

In Kotlin visiblity modifiers are categorized into four different types :

1) public 
2) protected
3) internal
4) private



public modifer :-----------
public moifier is accessible from everywhere in the project it is default modifer in kotlin. if any class interface etc are not specified with any access modfier then that class interface are 
used in public scope.

public class Example{  
}  
class Demo{  
}  
public fun hello()  
fun demo()  
public val x = 5  
val y = 10  

Protected modifier :--------------------------------------------

A protected modifier with class or interface allows visibility to its class or subclass only.
A protected declaration (when overridden) in its subclass is also protected modifier unless it is explicitly changed.

open class Base{  
    protected val i = 0  
}  
  
class Derived : Base(){  
  
    fun getValue() : Int  
    {  
        return i  
    }  
}  




Internal Modifier :---------------------------------------------
the internal modifier are newely added in kotlin, it is not available in java. Declaraing anything makes that field meked as internal field. The internal modifier makes the field only inside
the module in which it is implemented.

internal class Example{  
    internal val x = 5  
    internal fun getValue(){  
  
    }  
}  
internal val y = 10  



private modifier :------------------------------------------------------------------
A private modifier allows the declaration to be accessible only within the block in which properties, fields, etc. are declare. 
The private modifier declaration does not allow to access the outside the scope. A private package can be accessible within that specific file.

private class Example {  
    private val x = 1  
     private valdoSomething() {  
    }  
}






Kotlin Inheritance :--------------------------------------------------------------

Inheritance is an important feature of object oriented programming language. Inheritance allows to inherit the feature of existing class (or base or parent class) to new class 
(or derived class or child class).

The main class is called super class (or parent class) and the class which inherits the superclass is called subclass (or child class).
The subclass contains features of superclass as well as its own.

In Kotlin, the derived class inherits a base class using: operator in the class header (after the derive class name or constructor)

open class Base(p: Int){  
  
}  
class Derived(p: Int) : Base(p){  
  
}  



As final classes are final by default they cannot be inherited simply we use the open keyword before the class to inherit a class and make it non-final

open class Base{  
val x = 10  
}  
class Derived: Base() {  
    fun foo() {  
println("x is equal to " + x)  
    }  
}  
fun main(args: Array<String>) {  
val derived = Derived()  
    derived.foo()   
} 




